{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { finalize, map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./shared/loader.component\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./shared/company-service.service\"; // import { ToastrService } from 'ngx-toastr';\n\nexport let HttpInterceptor = /*#__PURE__*/(() => {\n  class HttpInterceptor {\n    constructor(loader, router, companyService // private toastr: ToastrService\n    ) {\n      this.loader = loader;\n      this.router = router;\n      this.companyService = companyService;\n      this.apiCount = 0;\n      this.nonLoadingApis = [];\n    }\n\n    intercept(request, next) {\n      this.apiCount++;\n      const body = request.body;\n      let withCredentials = true;\n\n      if (body instanceof FormData) {\n        if (body.get('cmd') == 'login') {\n          withCredentials = false;\n        }\n      }\n\n      if (request.url.includes('login') == true) {\n        withCredentials = false;\n      } // console.log(request)\n\n\n      if (this.nonLoadingApis.indexOf(request.url) == -1) {\n        this.loader.showLoader();\n      }\n\n      let temp = request.clone({\n        withCredentials: withCredentials\n      });\n      let user = JSON.parse(localStorage.getItem('full_name'));\n      user = user === null || user === void 0 ? void 0 : user.toLowerCase();\n\n      if (user !== \"administrator\") {\n        if (localStorage.getItem('companyData')) {\n          if (request.method === 'GET') {\n            // console.log(request.params.get('filters'))\n            let company = JSON.parse(localStorage.getItem('companyData'));\n            let reqFilters = JSON.parse(request.params.get('filters'));\n            let filters = (reqFilters === null || reqFilters === void 0 ? void 0 : reqFilters.length) ? [...reqFilters] : [];\n            console.log(request.urlWithParams);\n\n            if (request.urlWithParams.includes('api/resource/') || request.urlWithParams.includes('api/method/')) {\n              if (!request.urlWithParams.includes('/api/resource/Departments?') && !request.urlWithParams.includes('/api/resource/Designations?') && !request.urlWithParams.includes('/api/resource/Document Types?') && !request.urlWithParams.includes('/api/resource/Contract Types?') && !request.urlWithParams.includes('/api/resource/Role') && !request.urlWithParams.includes('/api/resource/Version?')) {\n                filters.push([\"company_code\", \"=\", `${company.company_code}`]);\n                temp = request.clone({\n                  setParams: {\n                    filters: JSON.stringify(filters)\n                  },\n                  withCredentials: withCredentials\n                });\n              }\n            }\n          }\n\n          if (request.method === 'POST') {\n            let company = JSON.parse(localStorage.getItem('companyData'));\n\n            if (company === null || company === void 0 ? void 0 : company.company_code) {\n              request.body[\"company_code\"] = company === null || company === void 0 ? void 0 : company.company_code;\n            }\n          }\n        }\n      }\n\n      return next.handle(temp).pipe(map(event => {\n        return event;\n      }), finalize(() => {\n        if (this.nonLoadingApis.indexOf('api/' + request.url) == -1) {\n          this.apiCount--;\n\n          if (this.apiCount <= 0) {\n            this.loader.hideLoader();\n          }\n        }\n      }), catchError(err => {\n        if (err.status === 401 || err.error.exc_type == \"CSRFTokenError\") {//   //  this.toastr.show(\"Session Expired\")\n          //   localStorage.clear()\n          //   sessionStorage.removeItem(\"SelItem\");\n          //   // this.toastr.show(\"Session Expired\")\n          //   this.router.navigate(['']);\n          // }\n          // if (err.status === 500) {\n          //   this.toastr.error(\"Internal Error 500\");\n          // }\n          // if (err.status === 403) {\n          //   // this.toastr.error(\"Forbidden Error 403\")\n          // }\n          // if (err.status === 409) {\n          //   this.toastr.error(\"Already Exists\");\n          // }\n          // if (err.status === 400) {\n          //   this.toastr.error(\"Bad Request\");\n        }\n\n        return throwError(err);\n      }));\n    }\n\n  }\n\n  HttpInterceptor.ɵfac = function HttpInterceptor_Factory(t) {\n    return new (t || HttpInterceptor)(i0.ɵɵinject(i1.LoaderService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.CompanyServiceService));\n  };\n\n  HttpInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpInterceptor,\n    factory: HttpInterceptor.ɵfac\n  });\n  return HttpInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}