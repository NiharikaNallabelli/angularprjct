{"ast":null,"code":"import parse, { is_viable_phone_number } from './parse';\nimport { matches_entirely } from './common';\nimport { get_national_number_pattern, get_type_fixed_line, get_type_mobile, get_type_toll_free, get_type_premium_rate, get_type_personal_number, get_type_voice_mail, get_type_uan, get_type_pager, get_type_voip, get_type_shared_cost } from './metadata'; // Finds out national phone number type (fixed line, mobile, etc)\n\nexport default function get_number_type(arg_1, arg_2, arg_3) {\n  var _sort_out_arguments = sort_out_arguments(arg_1, arg_2, arg_3),\n      input = _sort_out_arguments.input,\n      metadata = _sort_out_arguments.metadata; // When no input was passed\n\n\n  if (!input) {\n    return;\n  } // When `parse()` returned `{}`\n  // meaning that the phone number is not a valid one.\n\n\n  if (!input.country) {\n    return;\n  }\n\n  var national_number = input.phone;\n  var country_metadata = metadata.countries[input.country]; // The following is copy-pasted from the original function:\n  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n  // Is this national number even valid for this country\n\n  if (!is_of_type(national_number, get_national_number_pattern(country_metadata))) {\n    return; // 'UNKNOWN'\n  }\n\n  if (is_of_type(national_number, get_type_premium_rate(country_metadata))) {\n    return 'PREMIUM_RATE';\n  }\n\n  if (is_of_type(national_number, get_type_toll_free(country_metadata))) {\n    return 'TOLL_FREE';\n  }\n  /* istanbul ignore if */\n\n\n  if (is_of_type(national_number, get_type_shared_cost(country_metadata))) {\n    return 'SHARED_COST';\n  }\n  /* istanbul ignore if */\n\n\n  if (is_of_type(national_number, get_type_voip(country_metadata))) {\n    return 'VOIP';\n  }\n\n  if (is_of_type(national_number, get_type_personal_number(country_metadata))) {\n    return 'PERSONAL_NUMBER';\n  }\n  /* istanbul ignore if */\n\n\n  if (is_of_type(national_number, get_type_pager(country_metadata))) {\n    return 'PAGER';\n  }\n  /* istanbul ignore if */\n\n\n  if (is_of_type(national_number, get_type_uan(country_metadata))) {\n    return 'UAN';\n  }\n  /* istanbul ignore if */\n\n\n  if (is_of_type(national_number, get_type_voice_mail(country_metadata))) {\n    return 'VOICEMAIL';\n  } // Is it fixed line number\n\n\n  if (is_of_type(national_number, get_type_fixed_line(country_metadata))) {\n    // Because duplicate regular expressions are removed\n    // to reduce metadata size, if there's no \"mobile\" pattern\n    // then it means it was removed due to being a duplicate of some other pattern.\n    //\n    if (!get_type_mobile(country_metadata)) {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // Check if the number happens to qualify as both fixed line and mobile.\n    // (no such country in the minimal metadata set)\n\n    /* istanbul ignore if */\n\n\n    if (is_of_type(national_number, get_type_mobile(country_metadata))) {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n\n    return 'FIXED_LINE';\n  }\n\n  if (is_of_type(national_number, get_type_mobile(country_metadata))) {\n    return 'MOBILE';\n  } // return 'UNKNOWN'\n\n}\nexport function is_of_type(national_number, type) {\n  // // Check if any possible number lengths are present;\n  // // if so, we use them to avoid checking\n  // // the validation pattern if they don't match.\n  // // If they are absent, this means they match\n  // // the general description, which we have\n  // // already checked before a specific number type.\n  // if (get_possible_lengths(type) &&\n  // \tget_possible_lengths(type).indexOf(national_number.length) === -1)\n  // {\n  // \treturn false\n  // }\n  // get_type_pattern(type) === type\n  return matches_entirely(national_number, type);\n} // Sort out arguments\n\nexport function sort_out_arguments(arg_1, arg_2, arg_3) {\n  var input = void 0;\n  var metadata = void 0; // Normalize numerical `value`.\n  // https://github.com/catamphetamine/libphonenumber-js/issues/142\n  // `getNumberType(88005553535, ...)`.\n\n  if (typeof arg_1 === 'number') {\n    arg_1 = String(arg_1);\n  } // If the phone number is passed as a string.\n  // `getNumberType('88005553535', ...)`.\n\n\n  if (typeof arg_1 === 'string') {\n    // If \"resrict country\" argument is being passed\n    // then convert it to an `options` object.\n    // `getNumberType('88005553535', 'RU', metadata)`.\n    if (typeof arg_2 === 'string' || arg_2 === undefined) {\n      metadata = arg_3; // `parse` extracts phone numbers from raw text,\n      // therefore it will cut off all \"garbage\" characters,\n      // while this `validate` function needs to verify\n      // that the phone number contains no \"garbage\"\n      // therefore the explicit `is_viable_phone_number` check.\n\n      if (is_viable_phone_number(arg_1)) {\n        input = parse(arg_1, arg_2, metadata);\n      }\n    } // No \"resrict country\" argument is being passed.\n    // International phone number is passed.\n    // `getNumberType('+78005553535', metadata)`.\n    else {\n      metadata = arg_2; // `parse` extracts phone numbers from raw text,\n      // therefore it will cut off all \"garbage\" characters,\n      // while this `validate` function needs to verify\n      // that the phone number contains no \"garbage\"\n      // therefore the explicit `is_viable_phone_number` check.\n\n      if (is_viable_phone_number(arg_1)) {\n        input = parse(arg_1, metadata);\n      }\n    }\n  } // If the phone number is passed as a parsed phone number.\n  // `getNumberType({ phone: '88005553535', country: 'RU' }, ...)`.\n  else {\n    // The `arg_1` must be a valid phone number\n    // as a whole, not just a part of it which gets parsed here.\n    if (arg_1 && arg_1.phone && is_viable_phone_number(arg_1.phone)) {\n      input = arg_1;\n    }\n\n    metadata = arg_2;\n  } // Metadata is required.\n\n\n  if (!metadata || !metadata.countries) {\n    throw new Error('Metadata is required');\n  }\n\n  return {\n    input: input,\n    metadata: metadata\n  };\n} //# sourceMappingURL=types.js.map","map":null,"metadata":{},"sourceType":"module"}